upstream app_a {
    server app_1:80;
}
 

server {
       listen   3002;
       root     /opt/nginx/html;
       resolver 127.0.0.11  valid=1s    ipv6=off;

       access_by_lua '
         local opts = {
            redirect_uri_path = "/redirect_uri",
            discovery = "http://REPLACE_WITH_HOSTNAME:8080/realms/REPLACE_WITH_REALM/.well-known/openid-configuration",
            client_id = "REPLACE_WITH_CLIENT_ID",
            client_secret = "REPLACE_WITH_CREDENTIALS",
            redirect_uri_scheme = "http",  -- Change to https if your app is served over https
            logout_path = "/logout",
            redirect_after_logout_uri = "http://REPLACE_WITH_HOSTNAME:3002",
            redirect_after_logout_with_id_token_hint = false,
            session_contents = {id_token=true}
        }

         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
      ';
 
      # disabled caching so the browser won't cache the site.
      expires           0;
      add_header        Cache-Control private;    
 
      location / {
          proxy_pass      http://app_a;
          proxy_set_header    X-Forwarded-For         $remote_addr;
      }    
      
      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
 
      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
            root /usr/share/nginx/html;
      }
}


